package main

//Editor Generate
//

import (
	"bufio"
	"bytes"
	"github.com/gopherjs/gopherjs/js"
	"github.com/gopherjs/jquery"
	"golang.org/x/tools/present"
	"html/template"
	"strconv"
	"strings"
	"time"
)

var gblTmpl *template.Template
var jQuery = jquery.NewJQuery

func init() {
	gblTmpl = present.Template()
	funcMap := template.FuncMap{
		"playable": playable,
		"convert":  convert,
	}
	_, err := gblTmpl.Funcs(funcMap).Parse(TMPL)
	if err != nil {
		panic(err)
	}
}

func main() {

	jQuery(DOCUMENT).Ready(func() {
		redraw()
		resize()
	})

	jQuery(js.Global).Resize(func(e jquery.Event) {
		resize()
	})

	cnt := 0
	jQuery(INPUT).On(jquery.KEYDOWN, func(e jquery.Event) {
		cnt++
		if cnt == 15 {
			redraw()
			cnt = 0
		}
	})

	jQuery(PUBLISH).On(jquery.CLICK, func(e jquery.Event) {
		ajax("publish")
	})

	jQuery(SAVE).On(jquery.CLICK, func(e jquery.Event) {
		ajax("save")
	})
}

func ajax(url string) {

	d := js.Global.Get("document")
	dialog := d.Call("querySelector", "#dialog")
	dialog.Call("showModal")

	id := jQuery(ARTICLE_ID).Val()
	data := js.M{
		"Title":    jQuery(TITLE).Val(),
		"Tags":     jQuery(TAGS).Val(),
		"Markdown": jQuery(INPUT).Val(),
	}

	ajaxopt := js.M{
		"async":    true,
		"type":     "POST",
		"url":      "/admin/article/" + url + "/" + id,
		"dataType": "json",
		"data":     data,
		"success": func(data map[string]interface{}) {
		},
		"error": func(status interface{}) {
		},
		"complete": func(status interface{}) {
			dialog.Call("close")
		},
	}

	jquery.Ajax(ajaxopt)
}

func resize() {

	height := jQuery(js.Global).Height()

	margin := 215

	jQuery(LEFT).SetHeight(strconv.Itoa(height - margin))
	jQuery(RIGHT).SetHeight(strconv.Itoa(height - margin))

	jQuery(INPUT).SetHeight(strconv.Itoa(height - margin))
	jQuery(OUTPUT).SetHeight(strconv.Itoa(height - margin))
}

type Html struct {
	Author    string
	CreatedAt time.Time
}

func redraw() {

	title := jQuery(TITLE).Val()

	//sub
	//date
	//tags

	author := jQuery(AUTHOR).Val()
	job := jQuery(JOB).Val()
	mail := jQuery(EMAIL).Val()
	url := jQuery(URL).Val()
	twitter := "@" + jQuery(TWITTER).Val()

	header := title + "\n\n" +
		author + "\n" +
		job + "\n" +
		mail + "\n" +
		url + "\n" +
		twitter + "\n"

	md := jQuery(INPUT).Val()

	art := header + "\n" + md
	ctx := present.Context{ReadFile: readFile}

	reader := strings.NewReader(art)
	doc, err := ctx.Parse(reader, "blog.article", 0)
	if err != nil {
		return
	}

	html := Html{
		Author:    author,
		CreatedAt: time.Now(),
	}

	rtn := struct {
		*present.Doc
		Template    *template.Template
		PlayEnabled bool
		AuthorID    string
		StringID    string
		BlogName    string
		HTML        Html
	}{doc, gblTmpl, true, "empty", jQuery(ARTICLE_ID).Val(), jQuery(BLOGNAME).Val(), html}

	//Render
	var b bytes.Buffer
	writer := bufio.NewWriter(&b)

	err = gblTmpl.ExecuteTemplate(writer, "root", rtn)
	if err != nil {
		return
	}
	writer.Flush()

	jQuery(OUTPUT).Contents().Find("html").SetHtml(string(b.Bytes()))
}

func playable(c present.Code) bool {
	return present.PlayEnabled && c.Play && c.Ext == ".go"
}

func convert(t time.Time) string {
	//jst, _ := time.LoadLocation("Asia/Tokyo")
	//jt := t.In(jst)
	return t.Format("2006/01/02 15:04")
}

func readFile(name string) ([]byte, error) {
	//select file data
	return nil, nil
}

const (
	TITLE      = "input#Title"
	TAGS       = "input#Tags"
	AUTHOR     = "input#Name"
	JOB        = "input#Job"
	EMAIL      = "input#Email"
	URL        = "input#URL"
	TWITTER    = "input#TwitterId"
	ARTICLE_ID = "input#ID"
	BLOGNAME   = "input#BlogName"
	DOCUMENT   = "document"
	INPUT      = "textarea#editor"
	SAVE       = "button#save"
	PUBLISH    = "button#publish"
	OUTPUT     = "iframe#result"
	LEFT       = "div#left"
	RIGHT      = "div#right"
	TMPL       = `
	{{define "root"}}
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="A front-end template that helps you build fast, modern mobile web apps.">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>{{.BlogName}}-{{.Title}}</title>

    <!-- Add to homescreen for Chrome on Android -->
    <meta name="mobile-web-app-capable" content="yes">
    <link rel="icon" sizes="192x192" href="/static/images/touch/chrome-touch-icon-192x192.png">

    <!-- Add to homescreen for Safari on iOS -->
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Material Design Lite">
    <link rel="apple-touch-icon-precomposed" href="apple-touch-icon-precomposed.png">

    <!-- Tile icon for Win8 (144x144 + tile color) -->
    <meta name="msapplication-TileImage" content="/static/images/touch/ms-touch-icon-144x144-precomposed.png">
    <meta name="msapplication-TileColor" content="#3372DF">

    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link rel="stylesheet" href="https://code.getmdl.io/1.1.1/material.indigo-blue.min.css">
    <script defer src="https://code.getmdl.io/1.1.1/material.min.js"></script>

    <link rel="stylesheet" href="/static/css/styles.css">

  </head>
  <body>
    <div class="demo-blog demo-blog--blogpost mdl-layout mdl-js-layout has-drawer is-upgraded">
      <main class="mdl-layout__content" id="start">
        <div class="demo-back">
          <a class="mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--icon" href="/" title="go back" role="button">
            <i class="material-icons" role="presentation">arrow_back</i>
          </a>
        </div>
        <div class="demo-blog__posts mdl-grid">
          <div class="mdl-card mdl-shadow--4dp mdl-cell mdl-cell--12-col">

              <div class="mdl-card__media mdl-color-text--grey-50" style="background-image:url('/file/bg/{{.StringID}}');">
            <h3 class="title">{{.Title}}</h3>
            </div>

<!--
        {{if .Authors}}
          {{range .Authors}}
            <div class="author">
              {{range .Elem}}{{elem $.Template .}}{{end}}
            </div>
          {{end}}
        {{end}}
-->

            <div class="mdl-color-text--grey-700 mdl-card__supporting-text meta">

              <img src="/file/avatar/{{ .AuthorID }}" width="48" height="48"/>

              <div>
                <strong style="width:100%;"> {{ .HTML.Author }} </strong>
                <span> {{ convert  .HTML.CreatedAt }} </span>
              </div>

              <div class="section-spacer"></div>

<!--

                <button class="mdl-mini-footer--social-btn social-btn social-btn__twitter">
                  <span class="visuallyhidden">Twitter</span>
                </button>
                <button class="mdl-mini-footer--social-btn social-btn social-btn__blogger">
                  <span class="visuallyhidden">Facebook</span>
                </button>
                <button class="mdl-mini-footer--social-btn social-btn social-btn__gplus">
                  <span class="visuallyhidden">Google Plus</span>
                </button>
              <div class="meta__favorites">
                <i class="material-icons" role="presentation">favorite</i>
                <span class="visuallyhidden">favorites</span>
              </div>

              <div>
                <i class="material-icons" role="presentation">bookmark</i>
                <span class="visuallyhidden">bookmark</span>
              </div>

              <div>
                <i class="material-icons" role="presentation">share</i>
                <span class="visuallyhidden">share</span>
              </div>
-->
            </div>



            <div class="mdl-color-text--grey-700 mdl-card" style="padding-left:20px;width:100%;">

<!--
        {{with .Sections}}
          <div id="toc">
            {{template "TOC" .}}
          </div>
        {{end}}
-->

        {{range .Sections}}
          {{elem $.Template .}}
        {{end}}

            </div>

          </div>

<!--
          <nav class="demo-nav mdl-color-text--grey-50 mdl-cell mdl-cell--12-col">
            <a href="" class="demo-nav__button">
              <button class="mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--icon mdl-color--white mdl-color-text--grey-900" role="presentation">
                <i class="material-icons">arrow_back</i>
              </button>
              Newer
            </a>
            <div class="section-spacer"></div>
            <a href="" class="demo-nav__button">
              Older
              <button class="mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--icon mdl-color--white mdl-color-text--grey-900" role="presentation">
                <i class="material-icons">arrow_forward</i>
              </button>
            </a>
          </nav>
-->
        </div>

        <footer class="mdl-mini-footer">
          <div class="mdl-mini-footer--left-section">
            <button class="mdl-mini-footer--social-btn social-btn social-btn__twitter">
              <span class="visuallyhidden">Twitter</span>
            </button>
            <button class="mdl-mini-footer--social-btn social-btn social-btn__blogger">
              <span class="visuallyhidden">Facebook</span>
            </button>
            <button class="mdl-mini-footer--social-btn social-btn social-btn__gplus">
              <span class="visuallyhidden">Google Plus</span>
            </button>
          </div>
<!--
          <div class="mdl-mini-footer--right-section">
            <button class="mdl-mini-footer--social-btn social-btn__share">
              <i class="material-icons" role="presentation">share</i>
              <span class="visuallyhidden">share</span>
            </button>
          </div>
-->
        </footer>
      </main>
      <div class="mdl-layout__obfuscator"></div>
    </div>

    <a href="#start" id="top" class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-color--accent mdl-color-text--accent-contrast"><i class="material-icons">vertical_align_top</i></a>

  </body>
</html>
{{end}}

<!--
{{define "TOC"}}
  <ul>
  {{range .}}
    <li><a href="#TOC_{{.FormattedNumber}}">{{.Title}}</a></li>
    {{with .Sections}}{{template "TOC" .}}{{end}}
  {{end}}
  </ul>
{{end}}
-->

{{define "newline"}}
{{/* No automatic line break. Paragraphs are free-form. */}}
{{end}}

	{/*
This is the action template.
It determines how the formatting actions are rendered.
*/}

{{define "section"}}
  <h{{len .Number}} id="TOC_{{.FormattedNumber}}">{{.Title}}</h{{len .Number}}>
  {{range .Elem}}{{elem $.Template .}}{{end}}
{{end}}

{{define "list"}}
  <ul>
  {{range .Bullet}}
    <li>{{style .}}</li>
  {{end}}
  </ul>
{{end}}

{{define "text"}}
  {{if .Pre}}
  <div class="code"><pre>{{range .Lines}}{{.}}{{end}}</pre></div>
  {{else}}
  <p>
    {{range $i, $l := .Lines}}{{if $i}}{{template "newline"}}
    {{end}}{{style $l}}{{end}}
  </p>
  {{end}}
{{end}}

{{define "code"}}
  <div class="code{{if playable .}} playground{{end}}" contenteditable="true" spellcheck="false">{{.Text}}</div>
{{end}}

{{define "image"}}
<div class="image">
  <img src="{{.URL}}"{{with .Height}} height="{{.}}"{{end}}{{with .Width}} width="{{.}}"{{end}}>
</div>
{{end}}

{{define "iframe"}}
<iframe src="{{.URL}}"{{with .Height}} height="{{.}}"{{end}}{{with .Width}} width="{{.}}"{{end}}></iframe>
{{end}}

{{define "link"}}<p class="link"><a href="{{.URL}}" target="_blank">{{style .Label}}</a></p>{{end}}

{{define "html"}}{{.HTML}}{{end}}

{{define "caption"}}<figcaption>{{style .Text}}</figcaption>{{end}}

`
)
